<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>韩鑫</title>
  <subtitle>IT技术分享</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bjszdkj.cn/"/>
  <updated>2017-07-28T11:59:18.222Z</updated>
  <id>http://bjszdkj.cn/</id>
  
  <author>
    <name>Hanxin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>原型规则</title>
    <link href="http://bjszdkj.cn/2017/07/28/prototype/"/>
    <id>http://bjszdkj.cn/2017/07/28/prototype/</id>
    <published>2017-07-28T11:59:18.216Z</published>
    <updated>2017-07-28T11:59:18.222Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>5条原型规则是学习原型链的基础</p>
</blockquote>
<h6 id="一、所有的引用类型（对象、数组、函数），都具有对象特性，即可自由扩展属性（除了“null”以外）"><a href="#一、所有的引用类型（对象、数组、函数），都具有对象特性，即可自由扩展属性（除了“null”以外）" class="headerlink" title="一、所有的引用类型（对象、数组、函数），都具有对象特性，即可自由扩展属性（除了“null”以外）"></a>一、所有的引用类型（对象、数组、函数），都具有对象特性，即可自由扩展属性（除了“null”以外）</h6><pre><code>var obj={}; obj.a=100;  //对象obj扩展了属性a
var arr=[]; arr.a=100;  //数组arr扩展了属性a
function fn() {}    fn.a=100;  //函数fn扩展了属性a
</code></pre><h6 id="二、所有的引用类型（数组、对象、函数），都有一个proto（隐式原型）属性，属性值是一个普通的对象"><a href="#二、所有的引用类型（数组、对象、函数），都有一个proto（隐式原型）属性，属性值是一个普通的对象" class="headerlink" title="二、所有的引用类型（数组、对象、函数），都有一个proto（隐式原型）属性，属性值是一个普通的对象"></a>二、所有的引用类型（数组、对象、函数），都有一个<strong>proto</strong>（隐式原型）属性，属性值是一个普通的对象</h6><pre><code>console.log(obj.__proto__);
console.log(arr.__proto__);
console.log(fn.__proto__);
</code></pre><h6 id="三、所有的函数，都有一个prototype（显式原型）属性，属性值也是一个普通的对象"><a href="#三、所有的函数，都有一个prototype（显式原型）属性，属性值也是一个普通的对象" class="headerlink" title="三、所有的函数，都有一个prototype（显式原型）属性，属性值也是一个普通的对象"></a>三、所有的函数，都有一个prototype（显式原型）属性，属性值也是一个普通的对象</h6><pre><code>console.log(fn.prototype);
</code></pre><h6 id="四、所有的引用类型（数组、对象、函数），proto属性值指向它的构造函数的”prototype”的属性值"><a href="#四、所有的引用类型（数组、对象、函数），proto属性值指向它的构造函数的”prototype”的属性值" class="headerlink" title="四、所有的引用类型（数组、对象、函数），proto属性值指向它的构造函数的”prototype”的属性值"></a>四、所有的引用类型（数组、对象、函数），<strong>proto</strong>属性值指向它的构造函数的”prototype”的属性值</h6><pre><code>console.log(obj.__proto__ === Object.prototype)
</code></pre><h6 id="五、当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的proto（即它的构造函数的prototype）中寻找"><a href="#五、当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的proto（即它的构造函数的prototype）中寻找" class="headerlink" title="五、当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的proto（即它的构造函数的prototype）中寻找"></a>五、当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的<strong>proto</strong>（即它的构造函数的prototype）中寻找</h6><pre><code>// 构造函数
function Foo(name,age){
    this.name=name;
}
Foo.prototype.alertName=function(){
    alert(this.name);
}

// 创建示例
var f= new Foo(&#39;zhangsan&#39;);
f.printName=function(){
    console.log(this.name);
}

// 测试
f.printName();
f.alertName();
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;5条原型规则是学习原型链的基础&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;一、所有的引用类型（对象、数组、函数），都具有对象特性，即可自由扩展属性（除了“null”以外）&quot;&gt;&lt;a href=&quot;#一、所有的引用类型（对象、数组、函数），都具有
    
    </summary>
    
      <category term="Web前端" scheme="http://bjszdkj.cn/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="http://bjszdkj.cn/tags/Javascript/"/>
    
      <category term="原型" scheme="http://bjszdkj.cn/tags/%E5%8E%9F%E5%9E%8B/"/>
    
      <category term="原型链" scheme="http://bjszdkj.cn/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>5分钟入门vue.js</title>
    <link href="http://bjszdkj.cn/2017/07/28/vue/"/>
    <id>http://bjszdkj.cn/2017/07/28/vue/</id>
    <published>2017-07-28T11:08:38.033Z</published>
    <updated>2017-07-15T02:16:38.255Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Vue.js一个轻量级前端MVVM框架，核心思想是数据驱动+组件化，目前包括BAT在内的很多公司、项目组，都在向Vue.js 靠拢，除去 Vuejs 本身轻量、高效等特点，Vue.js 还具有上手快，简单易学的特点。</p>
</blockquote>
<h2 id="一、概览"><a href="#一、概览" class="headerlink" title="一、概览"></a>一、概览</h2><p>（1）vue.js 特点如图 1</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/images/vue/1.png" alt="图 1 vue.js 特点" title="">
                </div>
                <div class="image-caption">图 1 vue.js 特点</div>
            </figure>
<p>（2）vue.js 主要功能如图 2</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/images/vue/2.png" alt="图 2 vue.js 主要功能" title="">
                </div>
                <div class="image-caption">图 2 vue.js 主要功能</div>
            </figure>
<h2 id="二、MVVM-框架"><a href="#二、MVVM-框架" class="headerlink" title="二、MVVM 框架"></a>二、MVVM 框架</h2><p>前端交互越来越多，功能越来越复杂，架构从传统后台 MVC 向 REST API+前端 MV*迁移（MV*包括 MVC、MVP、MVVM)，其中 MVVM 架构图如图 3</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/images/vue/3.png" alt="图 3 MVVM 框架原理图" title="">
                </div>
                <div class="image-caption">图 3 MVVM 框架原理图</div>
            </figure>
<h3 id="2-1-MVVM-特点"><a href="#2-1-MVVM-特点" class="headerlink" title="2.1 MVVM 特点"></a>2.1 MVVM 特点</h3><ul>
<li>针对具有复杂交互逻辑的前端应用</li>
<li>提供基础的架构抽象</li>
<li>通过 ajax 数据持久化，保证前端用户体验</li>
</ul>
<h3 id="2-2-原理"><a href="#2-2-原理" class="headerlink" title="2.2 原理"></a>2.2 原理</h3><p>视图和数据不能直接通讯，当 View 或 Model发生改变时，ViewModel会监听到对应的变化，通知到View或 Model 完成相应的更新，实现了数据的双向绑定</p>
<h2 id="三、vue-js-对比-angular、-react"><a href="#三、vue-js-对比-angular、-react" class="headerlink" title="三、vue.js 对比 angular、 react"></a>三、vue.js 对比 angular、 react</h2><p>（1）文件大小</p>
<ul>
<li>vue.js 更轻量，gzip 后(vue 1.0)大小只有 20k+</li>
<li>Angular (1.4) 56K</li>
<li>React (15.2.0) 44K</li>
</ul>
<p>（2）学习曲线</p>
<ul>
<li>vue.js 更易上手，学习曲线平稳</li>
<li>angular 概念多，完全颠覆了之前前端开发的思维，学习曲线陡峭</li>
<li>react 技术栈庞大，学习成本也很高</li>
</ul>
<p>（3）去粗取精</p>
<ul>
<li>vue.js 吸取两家之长，借鉴了 angular 的指令和 react 的组件化</li>
<li>Vue.js 中的 v-show v-hide 对应 angular 中的 ng-show ng-hide</li>
<li>vue.js 组件化思想和 react 组件化思想一致，把一个页面抽成组件树，组件会有完整的生命周期。</li>
</ul>
<p>除此之外，vue 还有自己独有的特点，比如计算属性</p>
<h2 id="四、vue-js-核心思想"><a href="#四、vue-js-核心思想" class="headerlink" title="四、vue.js 核心思想"></a>四、vue.js 核心思想</h2><p>概述：vue.js 核心思想包括数据驱动和组件化</p>
<h3 id="4-1-数据驱动"><a href="#4-1-数据驱动" class="headerlink" title="4.1  数据驱动"></a>4.1  数据驱动</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/images/vue/4.png" alt="图 4 MVVM 框架示意图" title="">
                </div>
                <div class="image-caption">图 4 MVVM 框架示意图</div>
            </figure>
<h4 id="4-1-1-数据驱动原理"><a href="#4-1-1-数据驱动原理" class="headerlink" title="4.1.1  数据驱动原理"></a>4.1.1  数据驱动原理</h4><p>如图4，没有 MVVM 框架之前，数据通过 ajax 从后端获取数据，为了让视图改变，需要手动触发 DOM的改变，再比如，通过前端交互改变一些数据，为了让视图发生变化，仍然需要手动触发 DOM 改变，而手动改变 DOM不仅是一个繁琐的过程，还非常容易出错。有了 vue.js 之后，就省去了手动操作 DOM 的步骤。在vue.js 中，只需改变数据，vue.js 通过 diretives 指令对 DOM 进行了一些封装，当数据发生变化，会通知指令去修改对应的DOM，数据驱动指令变化，DOM 是数据的一种自然映射。vue.js 还会对操作进行监听，当我们修改视图的时候，vue.js监听到这些变化，从而改变数据，这样就形成了数据的双向绑定。</p>
<h4 id="4-1-2-数据响应原理"><a href="#4-1-2-数据响应原理" class="headerlink" title="4.1.2  数据响应原理"></a>4.1.2  数据响应原理</h4><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/images/vue/5.png" alt="图 5 vue 数据相应原理" title="">
                </div>
                <div class="image-caption">图 5 vue 数据相应原理</div>
            </figure>
<p>数据改变驱动视图自动更新，如图5 ，数据 a.b 在 vue 对象实例化的过程中，会给 a.b 这份数据通过 ES5 的 defineproperty 属性添加 getter 和 setter，同时 vue.js 会对模板进行编译，解析生成一个指令对象，这里就是一个 v-text，每个指令对象都会关联一个 watcher,当我们对指令对应的表达式 a.b 做求值的时候，就会触发它的 getter，这里把依赖会收集到 watcher，当再次改变 a.b 值时，就会触发它的 setter，会通知到对应watcher ，watcher 就会再次对 a.b 求值，当发现值改变了，watcher就会通知到指令，调用指令的 update方法，由于指令是对 DOM的封装，所以它会调用原生的 DOM 方法去更新视图，这样就完成了数据改变到视图更新的一个过程。</p>
<h3 id="4-2-组件化"><a href="#4-2-组件化" class="headerlink" title="4.2  组件化"></a>4.2  组件化</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/images/vue/6.png" alt="图 6 vue 组件化" title="">
                </div>
                <div class="image-caption">图 6 vue 组件化</div>
            </figure>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>扩展 HTML 元素，封装可重用的代码,如图 6，左侧是页面，被拆分成一个个小的区块，每个区块对应一个组件，组件可以嵌套，最终组合形成一个完整的页面。在 vue.js中，每个组件都对应着一个 view model，最终生成的 DOM 树和 view model 就是一一对应的关系。</p>
<h4 id="组件设计原则"><a href="#组件设计原则" class="headerlink" title="组件设计原则"></a>组件设计原则</h4><ul>
<li>页面上每个独立的可视/可交互区域视为一个组件</li>
<li>每个组件对应一个工程目录，组件所需要的各种资源在这个目录下就近维护</li>
<li>页面不过是组件的容器，组件可以嵌套自由组合形成完成的页面</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;Vue.js一个轻量级前端MVVM框架，核心思想是数据驱动+组件化，目前包括BAT在内的很多公司、项目组，都在向Vue.js 靠拢，除去 Vuejs 本身轻量、高效等特点，Vue.js 还具有上手快，简单易学的特点。&lt;/p&gt;
&lt;/blockquote
    
    </summary>
    
      <category term="Web前端" scheme="http://bjszdkj.cn/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="http://bjszdkj.cn/tags/Javascript/"/>
    
  </entry>
  
</feed>
